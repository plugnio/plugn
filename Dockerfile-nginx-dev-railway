FROM php:8.2-fpm

# Install required PHP extensions
RUN apt-get update && apt-get install -y \
     libpng-dev \
     libjpeg-dev \
     libfreetype6-dev \
     libzip-dev \
     unzip \
     nginx \
     cron \
    # wkhtmltopdf \
     #chromium \
     #imagemagick \
     #curl \
     #gh \
     #composer \
     libicu-dev \
     && docker-php-ext-configure intl \
     && docker-php-ext-configure gd --with-freetype --with-jpeg \
     && docker-php-ext-install gd pdo pdo_mysql zip  exif intl
#opcache
# Install Imagick PHP extension
#RUN apt-get install -y libmagickwand-dev \
#    && pecl install imagick \
#    && docker-php-ext-enable imagick

#RUN sed -i 's/<policy domain="coder" rights="none" pattern="PDF" \/>/<policy domain="coder" rights="read|write" pattern="PDF" \/>/' /etc/ImageMagick-6/policy.xml

# Install PHP dependencies
#RUN pecl install ffmpeg \
#    && docker-php-ext-enable ffmpeg

#COPY ./nginx/basic.conf /etc/nginx/nginx.conf

#COPY ./nginx/basic.conf /etc/nginx/sites-available/basic.conf

#RUN ln -s /etc/nginx/sites-available/basic.conf /etc/nginx/sites-enabled/
    
# Copy Nginx site configuration files
#COPY ./nginx/development.conf /etc/nginx/conf.d/development.conf
#COPY ./nginx/basic.conf /etc/nginx/conf.d/basic.conf
# Ensure the configuration files have the correct permissions
#RUN chmod 644 /etc/nginx/conf.d/*.conf

# Create sites-available and sites-enabled directories if they don't exist
#RUN mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

# Create symbolic links to enable the sites
#RUN ln -sf /etc/nginx/conf.d/development.conf /etc/nginx/sites-enabled/
#RUN ln -sf /etc/nginx/conf.d/basic.conf /etc/nginx/sites-enabled/

RUN ln -s /home/ubuntu/plugn ~/www

# Set working directory in the container
WORKDIR /home/ubuntu/plugn

# Copy application files to the container
COPY . /home/ubuntu/plugn

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Set permissions for the web server
#RUN chown -R www-data:www-data /home/ubuntu/plugn \
RUN chmod -R 775 /home/ubuntu/plugn

RUN cd /home/ubuntu/plugn

RUN composer install 

#COPY ./wait-for-it.sh /usr/local/bin/wait-for-it
#RUN chmod +x /usr/local/bin/wait-for-it

COPY ./cron/cronlist /etc/cron.d/cronlist
RUN chmod 0644 /etc/cron.d/cronlist
RUN crontab /etc/cron.d/cronlist

# Start cron service
RUN service cron start

#todo: not getting fired
#RUN ./init --env=Dev-Server-Nginx --overwrite=All 
  
# copy php configuration
COPY ./nginx/php.conf /etc/nginx/php.conf

# load environment specific configuration
COPY ./nginx/development.conf /etc/nginx/sites-available/development.conf
RUN ln -s /etc/nginx/sites-available/development.conf /etc/nginx/sites-enabled/

# run default nginx config
RUN rm /etc/nginx/sites-enabled/default

# Expose port 80
EXPOSE 80

# Start Nginx and PHP-FPM
#CMD ["sh", "-c", "service nginx start && ./yii migrate && php-fpm"]
CMD ["sh", "-c", "./init --env=Dev-Railway --overwrite=All && service nginx restart && php-fpm && tail -f /dev/null"]
#./yii migrate --interactive=0 && 