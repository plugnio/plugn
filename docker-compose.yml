version: '3.2'

services:
  mysql:
    image: mysql:5.7
    restart: always
    ports:
      - 3306:3306    
      - 33060:33060
    expose:
      - "3306"  
    #volumes:
      # uncomment if want to import sql file
      - ./mysql-data:/var/lib/mysql
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=12345
      - MYSQL_DATABASE=plugn
      - MYSQL_USER=plugnuser
      - MYSQL_PASSWORD=12345
    #entrypoint:
    #  sh -c "echo 'CREATE DATABASE IF NOT EXISTS plugn;CREATE DATABASE IF NOT EXISTS plugn_test;' > /docker-entrypoint-initdb.d/init.sql;
    #    ./yii migrate --interactive=0;
    #    ./yii fixture/load '*' --interactive=0;
    #    /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
  
  redis:
    image: redis:6.2.3
    volumes:
      - redis-data:/data 

  #adminer:
  #  image: adminer
  #  restart: always
  #  ports:
  #    - 8080:8080

  composer-deps:
    build: backend
    command: composer install
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
      
  # Start container to init dev environment and kill after
  init-environment:
    build: backend
    command: ./init --env=Development --overwrite=All
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "composer-deps"
        
  # Start container to run db migrations and kill after
  db-migration:
    build: backend
    command: bash -c "sleep 20 && php yii migrate --interactive=0 && php yii_test migrate --interactive=0"
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "init-environment"
      - "mysql"
      - "redis"
      - "composer-deps"
    links:
      - "mysql" 
        
  # Load fixture data
  load-fixture:
    build: backend
    command: bash -c "sleep 20 && php yii fixture/load '*' --interactive=0"
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "db-migration"
    links:
      - "mysql" 
        
  phpmyadmin:
    image: phpmyadmin
    #command: |
    #  sudo apt-get update
    #  sudo apt-get install -y libpng-dev libmcrypt-dev libreadline-dev zip zlib1g-dev default-mysql-client
    restart: always
    links:
      - "mysql"
    ports:
      - 8080:80 
    environment:
      - PMA_HOST=mysql
      #192.168.0.104
      - PMA_PORT=3306
      - PMA_USER=root
      - PMA_PASSWORD=12345
    depends_on:
      - "mysql"  
  
  backend:
    build: backend
    links:
      - "mysql"
    ports:
      - 21080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    working_dir: /app
    #command:
    #  - /usr/local/bin/php composer install
      #- /usr/local/bin/php /app/init --env="Development [Docker Compose]" --overwrite=All 
      #- /usr/local/bin/php /app/yii migrate --interactive=0
      #- /usr/local/bin/php /app/yii fixture/load "*" --interactive=0  
    depends_on:
      - "phpmyadmin" 
     # - "common"
      #load-fixture

  frontend:
    build: frontend
    ports:
      - 22080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "phpmyadmin"
    links:
      - "mysql" 

  agent:
    build: agent
    ports:
      - 23080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "phpmyadmin"
    links:
      - "mysql" 

  crmapi:
    build: crmapi
    ports:
      - 24080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "phpmyadmin"
    links:
      - "mysql" 

  api:
    build: api
    ports:
      - 25080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "phpmyadmin"
    links:
      - "mysql" 

  shortner:
    build: shortner
    ports:
      - 26080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "phpmyadmin"
    links:
      - "mysql" 

  partner:
    build: partner
    ports:
      - 27080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "phpmyadmin"
    links:
      - "mysql" 

  cron:
    build: cron
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app 
    links:
      - "mysql" 

volumes:
  mysql-data:
  redis-data:
