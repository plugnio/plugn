version: '3.2'

services:
  mysql:
    image: mysql:5.7
    restart: always
    ports:
      - 3306:3306    
      - 33060:33060
    #volumes:
    #  - mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=12345
      - MYSQL_DATABASE=plugn
      - MYSQL_USER=plugnuser
      - MYSQL_PASSWORD=12345
    entrypoint:
      sh -c "echo 'CREATE DATABASE IF NOT EXISTS plugn;CREATE DATABASE IF NOT EXISTS plugn_test;' > /docker-entrypoint-initdb.d/init.sql;
        /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

  redis:
    image: redis:6.2.3
    volumes:
      - redis-data:/data
 
  #adminer:
  #  image: adminer
  #  restart: always
  #  ports:
  #    - 8080:8080

  phpmyadmin:
    image: phpmyadmin
    command: |
      sudo apt-get update
      sudo apt-get install -y libpng-dev libmcrypt-dev libreadline-dev zip zlib1g-dev default-mysql-client
    restart: always
    ports:
      - 8080:80 
    environment:
      - PMA_HOST=localhost
      - PMA_PORT=3306
    depends_on:
      - "mysql"
 
  # Start container to install composer deps and kill after
  composer-deps:
    build: backend
    command: composer install
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app

  # Start container to init dev environment and kill after
  init-environment:
    build: backend
    command: ./init --env=Development --overwrite=All
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "composer-deps"

  # Start container to run db migrations and kill after
  db-migration:
    build: backend
    command: bash -c "sleep 20 && ./yii migrate --interactive=0 && ./yii_test migrate --interactive=0"
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "init-environment"
      - "mysql"
      - "redis"
      - "composer-deps"

  # Load fixture data
  load-fixture:
    build: backend
    command: bash -c "sleep 20 && ./yii fixture/load '*' --interactive=0"
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "db-migration"

  #cron:
  #  build: cron
  #  volumes:
  #    # Re-use local composer cache via host-volume
  #    - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
  #    - ./:/app
  #  depends_on:
  #    - "load-fixture"

  backend:
    build: backend
    ports:
      - 21080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

  frontend:
    build: frontend
    ports:
      - 22080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

  agent:
    build: agent
    ports:
      - 23080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

  crm:
    build: crm
    ports:
      - 24080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

  api:
    build: api
    ports:
      - 25080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

  shortner:
    build: shortner
    ports:
      - 26080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

  console:
    build: console
    ports:
      - 27080:80
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      # Mount source-code for development
      - ./:/app
    depends_on:
      - "load-fixture"

volumes:
  mysql-data:
  redis-data:
